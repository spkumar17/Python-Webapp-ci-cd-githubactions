name: CI/CD for Dockerized Flask App

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  checkout-and-test:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository code
      - uses: actions/checkout@v4

      # Step 2: Set up Python
      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: pip install -r src/requirements.txt

      # Step 4: Run tests
      - name: Run unit tests
        run: |
          pytest

  trivyfs:
    needs: checkout-and-test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Install trivy
        run: |
          sudo apt update -y
          sudo apt-get install wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy

      - name: run the filesystem scan
        run: |
          trivy fs --scanners vuln --format table .

  # sonar-scan:
  #   needs: checkout-and-test
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis
  #     - uses: sonarsource/sonarqube-scan-action@master
  #       env:
  #         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  #         SONAR_HOST_URL: ${{ secrets.SONAR_URL }}
  #     # If you wish to fail your job when the Quality Gate is red, uncomment the
  #     # following lines. This would typically be used to fail a deployment.
  #     - uses: sonarsource/sonarqube-quality-gate-action@master
  #       timeout-minutes: 5
  #       env:
  #         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  Dockerbuild:
    needs:
      # - sonar-scan
      - trivyfs
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: docker build
        run: |
          docker buildx build --load -t prasannakumarsinganamalla431/python-github-action:v1 .
          docker images
      - name: Save Docker image as artifact
        run: |
          docker save -o python_Dockerbuild.tar prasannakumarsinganamalla431/python-github-action:v1
          pwd
          ls -a
      - name: Tar and Upload a Build Artifact -- > name of plugin
        uses: actions/upload-artifact@v4
        with:
          name: python-artifact
          path: python_Dockerbuild.tar

  trivy-image-scan:
    runs-on: ubuntu-latest
    needs: Dockerbuild

    steps:
      - uses: actions/checkout@v4
      - name: Install trivy
        run: |
          sudo apt update -y
          sudo apt-get install wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Download Docker Image Artifact
        uses: actions/download-artifact@v4
        with:
          name: python-artifact # The same name as used in the upload step **** IMP****
          path: ./
      - name: ls and pwd
        run: |
          pwd
          ls -a
      - name: run the image scan
        run: |
          docker load -i python_Dockerbuild.tar
          trivy image --scanners vuln --format table  prasannakumarsinganamalla431/python-github-action:v1

  DockerPush:
    needs: trivy-image-scan
    runs-on: ubuntu-latest

    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Download Docker Image Artifact
        uses: actions/download-artifact@v4
        with:
          name: python-artifact # The same name as used in the upload step **** IMP****
          path: ./
      - name: docker push
        run: |
          docker load -i python_Dockerbuild.tar
          docker push prasannakumarsinganamalla431/python-github-action:v1
